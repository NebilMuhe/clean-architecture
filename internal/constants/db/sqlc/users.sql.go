// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package db

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  username,
  refresh_token
) VALUES (
  $1, $2
) RETURNING id, username, refresh_token, created_at, deleted_at
`

type CreateSessionParams struct {
	Username     string `json:"username"`
	RefreshToken string `json:"refresh_token"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.Username, arg.RefreshToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    email,
    password
) VALUES (
    $1, $2, $3
)
RETURNING id, username, email, password, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getToken = `-- name: GetToken :one
SELECT id, username, refresh_token, created_at, deleted_at
FROM sessions
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetToken(ctx context.Context, username string) (Session, error) {
	row := q.db.QueryRow(ctx, getToken, username)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const loginUser = `-- name: LoginUser :one
SELECT id, username, email, password, created_at, updated_at, deleted_at
FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) LoginUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, loginUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
